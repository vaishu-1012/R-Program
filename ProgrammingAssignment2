## This function creates a special "matrix" object that can cache its inverse

makeCacheMatrix <- function(x = matrix()) {
        invMat <- NULL
                set <- function(y) {
                        x <<- y
                        invMat <<- NULL
                }
                get <- function() x
                setinv <- function(solve) invMat <<- solve
                getinv <- function() invMat
                list(set = set, 
                     get = get,
                     setinv = setinv,
                     getinv = getinv)
}


## returns the inverse of the original matrix which was input to "makeCacheMatrix()".
## if the inverse was calculated previously it will find it in the cache and skip the calculation.
## if it is not in the cache it will do the calculation.
## uses the "setinv" function to sets the value of the inverse in the cache
## returns the invers of the matrix x

cacheSolve <- function(x, ...) {
        invMat <- x$getinv()
        if(!is.null(invMat)) {
                message("getting cached data")
                return(invMat)
        }
        data <- x$get()
        invMat <- solve(data, ...)
        x$setinv(invMat)
        invMat   
}
